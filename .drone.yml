kind: pipeline
type: docker
name: terraform-pipeline

platform:
  os: linux
  arch: amd64

clone:
  disable: true

volumes:
  - name: terraform
    host:
      path: /mnt/apppooldata/devappdata/drone-runners

steps:
- name: create_directories
  image: alpine:latest
  volumes:
    - name: terraform
      path: /workspace/terraform
  commands:
    - mkdir -p /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/

- name: custom_clone
  image: docker:git
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  commands:
    - if [ -d /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/.git ]; then
        cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/ && git fetch && git reset --hard origin/main;
      else
        git clone https://git.drewpy.pro/johnpshids/aws-vpce-policy-tester.git /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/;
      fi

- name: terraform-plan
  image: hashicorp/terraform:latest
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_org_id:
      from_secret: TF_VAR_org_id
    TF_VAR_org_path:
      from_secret: TF_VAR_org_path
    TF_VAR_account_id:
      from_secret: TF_VAR_account_id
    TF_VAR_source_ssh_network:
      from_secret: TF_VAR_source_ssh_network
    TF_VAR_public_key:
      from_secret: TF_VAR_public_key
  commands:
    - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
    - terraform init
    - terraform plan

# Run terraform apply if the action parameter is not 'destroy'
- name: terraform-apply
  image: hashicorp/terraform:latest
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_org_id:
      from_secret: TF_VAR_org_id
    TF_VAR_org_path:
      from_secret: TF_VAR_org_path
    TF_VAR_account_id:
      from_secret: TF_VAR_account_id
    TF_VAR_source_ssh_network:
      from_secret: TF_VAR_source_ssh_network
    TF_VAR_public_key:
      from_secret: TF_VAR_public_key
  commands:
    - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
    - terraform apply -auto-approve
  when:
    - action != "destroy"

# Run terraform destroy if the action parameter is 'destroy'
- name: terraform-destroy
  image: hashicorp/terraform:latest
  network_mode: br1.201
  volumes:
    - name: terraform
      path: /workspace/terraform
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
    TF_VAR_org_id:
      from_secret: TF_VAR_org_id
    TF_VAR_org_path:
      from_secret: TF_VAR_org_path
    TF_VAR_account_id:
      from_secret: TF_VAR_account_id
    TF_VAR_source_ssh_network:
      from_secret: TF_VAR_source_ssh_network
    TF_VAR_public_key:
      from_secret: TF_VAR_public_key
  commands:
    - cd /workspace/terraform/${DRONE_REPO_OWNER}/${DRONE_REPO_NAME}/
    - terraform destroy -auto-approve
  when:
    action == "destroy"

trigger:
  branch:
    - main
